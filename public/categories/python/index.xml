<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on </title>
    <link>https://johannes-pirmann.com/categories/python/</link>
    <description>Recent content in python on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Jun 2021 14:35:20 +0000</lastBuildDate><atom:link href="https://johannes-pirmann.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Infrastructure with Python</title>
      <link>https://johannes-pirmann.com/post/aws-infrastructure-with-python/</link>
      <pubDate>Wed, 16 Jun 2021 14:35:20 +0000</pubDate>
      
      <guid>https://johannes-pirmann.com/post/aws-infrastructure-with-python/</guid>
      
        <description>Prerequisites Please follow this article to setup your AWS development environment.
Setting up the directory In the terminal go to the location where you want to put this project and create a new directory with mkdir and switch into the new directory with cd.
sudo mkdir directory_name cd directory_name Initialize the default CDK app cdk init app --language python Creating a virtual environment for our dependencies If you are using python 3.</description>
      
    </item>
    
    <item>
      <title>Control a Relay with a Raspberry Pi and Python</title>
      <link>https://johannes-pirmann.com/post/control-a-relay/</link>
      <pubDate>Tue, 01 Jun 2021 16:26:57 +0000</pubDate>
      
      <guid>https://johannes-pirmann.com/post/control-a-relay/</guid>
      
        <description>With this project I wanted to control a motor over the internet. The motor needs 12-24V DC with 1500mA. It is started through an impulse with the same potential as the power supply.
I chose a Raspberry Pi model B for this project, as I had one laying around. As OS I used Raspberry Pi OS Lite on a 8GB SD Card. To control the motor I created a simple Flask API.</description>
      
    </item>
    
  </channel>
</rss>